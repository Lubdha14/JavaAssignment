3. Write a menu driven program to maintain student information. Modify  Student class 
created in previous assignment.  Add a member gpa in student class, add a function in 
student class to return GPA of a student 
calculateGPA() 
gpa=(1/3)*m1+(1/2)*m2+(1/4)*m3 
Create an array to store Multiple students. 
1. Display All Student 
2. Search by id 
3.  Search by name 
4. calculate GPA of a student 
5. Exit

-----------------------------------------------------------------------

			Main.Java 
package ass3;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Student> students = new ArrayList<>();
        int choice;

        // Sample data
        students.add(new Student("S001", "Divya", 78, 86, 89));
        students.add(new Student("S002", "Rahul", 90, 85, 88));

        do {
            System.out.println("Menu:");
            System.out.println("1. Display All Students");
            System.out.println("2. Search by ID");
            System.out.println("3. Search by Name");
            System.out.println("4. Calculate GPA of a Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Clear the buffer

            switch (choice) {
                case 1:
                    System.out.println("All Students:");
                    for (Student student : students) {
                        student.displayInfo();
                    }
                    break;

                case 2:
                    System.out.print("Enter Student ID: ");
                    String id = scanner.nextLine();
                    Student foundById = null;
                    for (Student student : students) {
                        if (student.getStudid().equalsIgnoreCase(id)) {
                            foundById = student;
                            break;
                        }
                    }
                    if (foundById != null) {
                        foundById.displayInfo();
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;

                case 3:
                    System.out.print("Enter Student Name: ");
                    String name = scanner.nextLine();
                    Student foundByName = null;
                    for (Student student : students) {
                        if (student.getName().equalsIgnoreCase(name)) {
                            foundByName = student;
                            break;
                        }
                    }
                    if (foundByName != null) {
                        foundByName.displayInfo();
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;

                case 4:
                    System.out.print("Enter Student ID to calculate GPA: ");
                    String gpaId = scanner.nextLine();
                    Student gpaStudent = null;
                    for (Student student : students) {
                        if (student.getStudid().equalsIgnoreCase(gpaId)) {
                            gpaStudent = student;
                            break;
                        }
                    }
                    if (gpaStudent != null) {
                        System.out.printf("GPA of %s: %.2f%n", gpaStudent.getName(), gpaStudent.getGPA());
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;

                case 5:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);

        scanner.close();
    }
}
----------------------------------------------------------------------------------------
					Student .Java 
				
package ass3;
public class Student {
    private String studid;
    private String name;
    private double m1;
    private double m2;
    private double m3;
    private double gpa;

    // Constructor
    public Student(String studid, String name, double m1, double m2, double m3) {
        this.studid = studid;
        this.name = name;
        this.m1 = m1;
        this.m2 = m2;
        this.m3 = m3;
        this.gpa = calculateGPA(); // Calculate GPA upon creation
    }

    // Method to calculate GPA
    public double calculateGPA() {
        return (1.0 / 3) * m1 + (1.0 / 2) * m2 + (1.0 / 4) * m3;
    }

    // Getters
    public String getStudid() {
        return studid;
    }

    public String getName() {
        return name;
    }

    public double getGPA() {
        return gpa;
    }

    // Method to display student information
    public void displayInfo() {
        System.out.println("Student ID: " + studid);
        System.out.println("Name: " + name);
        System.out.println("M1: " + m1);
        System.out.println("M2: " + m2);
        System.out.println("M3: " + m3);
        System.out.printf("GPA: %.2f%n", gpa);
        System.out.println("-----------");
    }
}
=================================================================================


Q2. Write a java program to store information of your friends 
id,name,lastname,hobbies,mobno,email,bdate,address 
note: hobbies- a friend may have multiple hobbies 
Accept all friends details and store it in an array 
And do the following. 
1. Display All Friend 
2. Search by id 
3. Search by name 
4. Display all friend with a particular hobby     
5. Exit
------------------------------------------------------------------

			Friend.Java
package assQ2fd;

import java.util.Arrays;

public class Friend {
    private String id;
    private String name;
    private String lastName;
    private String[] hobbies;
    private String mobileNo;
    private String email;
    private String birthDate;
    private String address;

    // Constructor
    public Friend(String id, String name, String lastName, String[] hobbies, String mobileNo, String email, String birthDate, String address) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
        this.hobbies = hobbies;
        this.mobileNo = mobileNo;
        this.email = email;
        this.birthDate = birthDate;
        this.address = address;
    }

    // Getters
    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String[] getHobbies() {
        return hobbies;
    }

    public void displayInfo() {
        System.out.println("ID: " + id);
        System.out.println("Name: " + name + " " + lastName);
        System.out.println("Mobile No: " + mobileNo);
        System.out.println("Email: " + email);
        System.out.println("Birth Date: " + birthDate);
        System.out.println("Address: " + address);
        System.out.println("Hobbies: " + String.join(", ", hobbies));
        System.out.println("-----------");
    }
}

---------------------------------------------------------------------------------
				Main . Java

package assQ2fd;

import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Friend> friends = new ArrayList<>();
        int choice;

        do {
            System.out.println("Menu:");
            System.out.println("1. Add Friend");
            System.out.println("2. Display All Friends");
            System.out.println("3. Search by ID");
            System.out.println("4. Search by Name");
            System.out.println("5. Display Friends with a Particular Hobby");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Clear the buffer

            switch (choice) {
                case 1:
                    // Add a new friend
                    System.out.print("Enter ID: ");
                    String id = scanner.nextLine();
                    System.out.print("Enter First Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Last Name: ");
                    String lastName = scanner.nextLine();
                    System.out.print("Enter Hobbies (comma separated): ");
                    String[] hobbies = scanner.nextLine().split(",\\s*");
                    System.out.print("Enter Mobile No: ");
                    String mobileNo = scanner.nextLine();
                    System.out.print("Enter Email: ");
                    String email = scanner.nextLine();
                    System.out.print("Enter Birth Date: ");
                    String birthDate = scanner.nextLine();
                    System.out.print("Enter Address: ");
                    String address = scanner.nextLine();
                    
                    friends.add(new Friend(id, name, lastName, hobbies, mobileNo, email, birthDate, address));
                    break;

                case 2:
                    // Display all friends
                    System.out.println("All Friends:");
                    for (Friend friend : friends) {
                        friend.displayInfo();
                    }
                    break;

                case 3:
                    // Search by ID
                    System.out.print("Enter ID to search: ");
                    String searchId = scanner.nextLine();
                    Friend foundById = null;
                    for (Friend friend : friends) {
                        if (friend.getId().equalsIgnoreCase(searchId)) {
                            foundById = friend;
                            break;
                        }
                    }
                    if (foundById != null) {
                        foundById.displayInfo();
                    } else {
                        System.out.println("Friend not found.");
                    }
                    break;

                case 4:
                    // Search by Name
                    System.out.print("Enter Name to search: ");
                    String searchName = scanner.nextLine();
                    Friend foundByName = null;
                    for (Friend friend : friends) {
                        if (friend.getName().equalsIgnoreCase(searchName)) {
                            foundByName = friend;
                            break;
                        }
                    }
                    if (foundByName != null) {
                        foundByName.displayInfo();
                    } else {
                        System.out.println("Friend not found.");
                    }
                    break;

                case 5:
                    // Display friends with a particular hobby
                    System.out.print("Enter Hobby to search: ");
                    String hobbyToSearch = scanner.nextLine();
                    System.out.println("Friends with Hobby \"" + hobbyToSearch + "\":");
                    boolean hobbyFound = false;
                    for (Friend friend : friends) {
                        for (String hobby : friend.getHobbies()) {
                            if (hobby.equalsIgnoreCase(hobbyToSearch)) {
                                friend.displayInfo();
                                hobbyFound = true;
                                break;
                            }
                        }
                    }
                    if (!hobbyFound) {
                        System.out.println("No friends found with this hobby.");
                    }
                    break;

                case 6:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 6);

        scanner.close();
    }
}


========================================================================================

Q4. Use employee class to store id,name,sal,dept and designation.  
a. Use HashSet to store multiple employee objects. Add required functions in the appropriate 
class. 
No duplicate employee entries are allowed. -2 Employee objects are same if their id is same  
b.       
b. Use Treemap to store multiple Employee objects. Add required functions in the 
appropriate class. 

-----------------------------------------------------------------------
			Employee . Java

package Q4HashsetTreemap;

import java.util.Objects;

public class Employee implements Comparable<Employee> {
    private int id;
    private String name;
    private double salary;
    private String dept;
    private String designation;

    public Employee(int id, String name, double salary, String dept, String designation) {
        this.id = id;
        this.name = name;
        this.salary = salary;
        this.dept = dept;
        this.designation = designation;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public String getDept() {
        return dept;
    }

    public String getDesignation() {
        return designation;
    }

    // Override equals and hashCode to prevent duplicate entries in HashSet
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Employee employee = (Employee) o;
        return id == employee.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    // Implement compareTo for sorting by id in TreeMap
    @Override
    public int compareTo(Employee other) {
        return Integer.compare(this.id, other.id);
    }

    @Override
    public String toString() {
        return "Employee ID: " + id + ", Name: " + name + ", Salary: " + salary +
                ", Dept: " + dept + ", Designation: " + designation;
    }
}

---------------------------------------------------------------------
			
			Main . Java

package Q4HashsetTreemap;

import java.util.HashSet;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        // Create data structures to store employees
        HashSet<Employee> employeeSet = new HashSet<>();
        TreeMap<Integer, Employee> employeeMap = new TreeMap<>();

        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Employee Management System ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display Employees (HashSet)");
            System.out.println("3. Display Employees (TreeMap)");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    addEmployee(employeeSet, employeeMap, scanner);
                    break;
                case 2:
                    displayEmployees(employeeSet);
                    break;
                case 3:
                    displayEmployees(employeeMap);
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);

        scanner.close();
    }

    // Method to add an employee to both HashSet and TreeMap
    public static void addEmployee(HashSet<Employee> employeeSet, TreeMap<Integer, Employee> employeeMap, Scanner scanner) {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // consume newline
        System.out.print("Enter Employee Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Salary: ");
        double salary = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        System.out.print("Enter Department: ");
        String dept = scanner.nextLine();
        System.out.print("Enter Designation: ");
        String designation = scanner.nextLine();

        Employee newEmployee = new Employee(id, name, salary, dept, designation);

        // Add to HashSet and check for duplicates
        if (employeeSet.add(newEmployee)) {
            System.out.println("Employee added successfully to HashSet.");
        } else {
            System.out.println("Duplicate ID detected. Employee not added to HashSet.");
        }

        // Add to TreeMap
        if (employeeMap.containsKey(id)) {
            System.out.println("Duplicate ID detected. Employee not added to TreeMap.");
        } else {
            employeeMap.put(id, newEmployee);
            System.out.println("Employee added successfully to TreeMap.");
        }
    }

    // Method to display employees from HashSet
    public static void displayEmployees(HashSet<Employee> employeeSet) {
        System.out.println("\n--- Displaying Employees (HashSet) ---");
        if (employeeSet.isEmpty()) {
            System.out.println("No employees to display.");
        } else {
            for (Employee emp : employeeSet) {
                System.out.println(emp);
            }
        }
    }

    // Method to display employees from TreeMap
    public static void displayEmployees(TreeMap<Integer, Employee> employeeMap) {
        System.out.println("\n--- Displaying Employees (TreeMap) ---");
        if (employeeMap.isEmpty()) {
            System.out.println("No employees to display.");
        } else {
            for (Map.Entry<Integer, Employee> entry : employeeMap.entrySet()) {
                System.out.println(entry.getValue());
            }
        }
    }
}
===============================================================================================

Q10.  Write a java program to create a Vector for storing Strings 
Use Enumerator to navigate through Vector 
---------------------------------------------------------------------

		 testQ10.java
			
package Q11;

import java.util.Enumeration;
import java.util.Vector;

public class testQ10 {
    public static void main(String[] args) {
        Vector<String> stringVector = new Vector<>();
        
        // Adding strings to the Vector
        stringVector.add("Apple");
        stringVector.add("Banana");
        stringVector.add("Cherry");
        
        // Using Enumerator to navigate through the Vector
        Enumeration<String> elements = stringVector.elements();
        System.out.println("Vector elements:");
        while (elements.hasMoreElements()) {
            System.out.println(elements.nextElement());
        }
    }
}
============================================================================================

Q11.  Write a Java program to store Student information studid, name, degree, email in a ArrayList  
at the time of exit write data in a file in csv format
-------------------------------------------------------------------------------------
			Student . Java
package Q11;

public class Student {
    private int studId;
    private String name;
    private String degree;
    private String email;

    public Student(int studId, String name, String degree, String email) {
        this.studId = studId;
        this.name = name;
        this.degree = degree;
        this.email = email;
    }

    public String toCSV() {
        return studId + "," + name + "," + degree + "," + email;
    }

    @Override
    public String toString() {
        return "Student ID: " + studId + ", Name: " + name + ", Degree: " + degree + ", Email: " + email;
    }
}

--------------------------------------------------------------------------

			 testcsv . Java
package Q11;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class testcsv {
    private ArrayList<Student> students = new ArrayList<>();

    public void addStudent(Student student) {
        students.add(student);
    }

    public void exitAndSave() {
        try (FileWriter writer = new FileWriter("students.csv")) {
            for (Student student : students) {
                writer.write(student.toCSV() + "\n");
            }
            System.out.println("Data saved to students.csv");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        testcsv manager = new testcsv();
        Scanner scanner = new Scanner(System.in);

        // Adding some sample students
        manager.addStudent(new Student(1, "Alice", "Computer Science", "alice@example.com"));
        manager.addStudent(new Student(2, "Bob", "Engineering", "bob@example.com"));

        // Saving data on exit
        manager.exitAndSave();
        scanner.close();
    }
}


